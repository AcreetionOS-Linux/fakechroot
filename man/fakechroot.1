.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.3
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "FAKECHROOT 1"
.TH FAKECHROOT 1 "23 Aug 2005" "Debian" " "
.SH "NAME"
fakechroot \- gives a fake chroot environment
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBfakechroot\fR
[\fB\-l\fR|\fB\-\-lib\fR\ \fIlibrary\fR]
[\fB\-\-\fR]
[\fIcommand\fR]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
fakechroot runs a command in an environment were is additional possibility to
use \fIchroot\fR\|(8) command without root privileges. This is useful for allowing
users to create own chrooted environment with possibility to install another
packages without need for root privileges.
.PP
fakechroot replaces more library functions (\fIchroot\fR\|(2), \fIopen\fR\|(2), etc.) by ones
that simulate the effect the real library functions would have had, had the
user really been in chroot. These wrapper functions are in a shared library
\&\fI/usr/lib/fakechroot/libfakechroot.so\fR which is loaded through the
\&\fB\s-1LD_PRELOAD\s0\fR mechanism of the dynamic loader. (See \fIld.so\fR\|(8))
.PP
In fake chroot you can install Debian bootstrap with `debootstrap
\&\-\-variant=fakechroot' command. In this environment you can use i.e. \fIapt\-get\fR\|(8)
command to install another packages from common user's account.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-l\fR \fIlibrary\fR|\fB\-\-lib\fR \fIlibrary\fR" 4
.IX Item "-l library|--lib library"
Specify an alternative wrapper library.
.IP "[\fB\-\-\fR] \fIcommand\fR" 4
.IX Item "[--] command"
Any command you want to be ran as fakechroot. Use '\fB\-\-\fR' if in the command
you have other options that may confuse fakechroot's option parsing.
.IP "\fB\-h\fR" 4
.IX Item "-h"
Display help.
.IP "\fB\-v\fR" 4
.IX Item "-v"
Display version.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Here is an example session with fakechroot. Notice that inside the fake root
environment file manipulation that requires root privileges succeeds, but is
not really happening.
.PP
.Vb 2
\& $ export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/bin/X11
\& $ fakeroot \-s fakechroot.save fakechroot debootstrap \-\-variant=fakechroot sarge /tmp/sarge
.Ve
.PP
.Vb 15
\& $ fakeroot \-i fakechroot.save fakechroot chroot /tmp/sarge /bin/bash
\& # cd /
\& # sh /usr/share/doc/fakechroot/examples/savemode.sh
\& # echo deb http://ftp.debian.org/debian sarge main contrib non\-free > /etc/apt/sources.list
\& # echo deb\-src http://ftp.debian.org/debian sarge main contrib non\-free >> /etc/apt/sources.list
\& # apt\-get update
\& # apt\-get install adduser whiptail build\-essential devscripts
\& # adduser \-\-uid 1001 dexter
\& # cd /tmp
\& # apt\-get source hello
\& # cd hello\-*
\& # export DEBUILD_PRESERVE_ENVVARS=FAKECHROOT,LD_PRELOAD,LD_LIBRARY_PATH,FAKEROOTKEY,\e
\& > FAKECHROOT_BASE,FAKED_MODE
\& # debuild \-\-preserve\-env \-b
\& # exit
.Ve
.SH "SECURITY ASPECTS"
.IX Header "SECURITY ASPECTS"
fakechroot is a regular, non-setuid program. It does not enhance a user's
privileges, or decrease the system's security.
.SH "FILES"
.IX Header "FILES"
.IP "\fI/usr/lib/fakechroot/libfakechroot.so\fR" 4
.IX Item "/usr/lib/fakechroot/libfakechroot.so"
The shared library containing the wrapper functions.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
.IP "\fB\s-1FAKECHROOT\s0\fR" 4
.IX Item "FAKECHROOT"
The value is true for fake chroot environment.
.IP "\fB\s-1FAKECHROOT_VERSION\s0\fR" 4
.IX Item "FAKECHROOT_VERSION"
The version of current fakechroot package.
.IP "\fB\s-1FAKECHROOT_BASE\s0\fR" 4
.IX Item "FAKECHROOT_BASE"
The root directory for fake chroot environment.
.IP "\fB\s-1LD_LIBRARY_PATH\s0\fR, \fB\s-1LD_PRELOAD\s0\fR" 4
.IX Item "LD_LIBRARY_PATH, LD_PRELOAD"
Fakechroot is implemented by wrapping system calls. This is accomplished by
setting LD_LIBRARY_PATH=/usr/lib/fakechroot and
LD_PRELOAD=libfakechroot.so. That library is loaded before the
system's C library, and so most of the library functions are intercepted by
it. If you need to set either \fB\s-1LD_LIBRARY_PATH\s0\fR or \fB\s-1LD_PRELOAD\s0\fR from within
a fakechroot environment, it should be set relative to the given paths, as in
LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/foo/bar/
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
.IP "o" 4
Every command executed within fakechroot needs to be linked to the same
version of the C library as fakechroot itself.
.IP "o" 4
\&\fI/lib/ld\-linux.so.2\fR is always loaded from real environment.
.IP "o" 4
You can override fake chroot with symlinks to the outside. It can be useful
for accessing \fI/proc\fR or \fI/dev\fR directory.
.IP "o" 4
Statically linked binaries doesn't work, especially \fIldconfig\fR\|(8), so you have to
wrap this command and i.e. set the dpkg diversion, see: \fIdpkg\-divert\fR\|(8).
.IP "o" 4
\&\fIldd\fR\|(1) also doesn't work. You have to use wrapper.
.IP "o" 4
There are no real devices so you have to symlink to the real ones.
.IP "o" 4
Remove \fI/dev/tty\fR or symlink to the real \fI/dev/tty\fR \- the full screen apps
doesn't work if it exists as faked device.
.IP "o" 4
If debconf with dialog is broken \- remove \fI/dev/tty\fR or export
DEBIAN_FRONTEND=readline.
.IP "o" 4
\&\fIltrace\fR\|(1) sometimes doesn't work. \fIstrace\fR\|(1) does work pretty well.
.IP "o" 4
\&\fIlckpwdf()\fR and \fIulckpwdf()\fR are ignored so update-passwd should work
.IP "o" 4
Your real uid have to exist in \fI/etc/passwd\fR. Create it with adduser \-\-uid
realuid realuser.
.IP "o" 4
\&\fIdebuild\fR\|(1) cleans environment. Use \-\-preserve\-env option to prevent this
behaviour.
.SH "COPYING"
.IX Header "COPYING"
fakechroot is distributed under the \s-1GNU\s0 General Public License. (\s-1GPL\s0 2.0 or
greater).
.SH "AUTHOR"
.IX Header "AUTHOR"
Piotr Roszatycki <dexter@debian.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIfakeroot\fR\|(1), \fIdpkg\-buildpackage\fR\|(1), \fIdebuild\fR\|(1), \fIdebootstrap\fR\|(8)
