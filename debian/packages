# $Id$

# If the debian/rules or debian/control file is missing, rebuild the file:
#
#   $ yada rebuild control
#   $ yada rebuild rules

# Environment variables:
#   with_test=%{$with_test}  - build with check test

%define with_test %{?$with_test:1}%{!?$with_test:0}
%define without_test %{!?with_test:1}%{?with_test:0}

# Macro switches:
#   with_test=%{with_test} without_test=%{without_test}

%define fakeroot_version 1.2.4
%define automake_version 1.7

# Other macros:
#   fakeroot_version=%{fakeroot_version}
#   automake_version=%{automake_version}

Source: fakechroot
Section: utils
Priority: optional
Maintainer: Piotr Roszatycki <dexter@debian.org>
Standards-Version: 3.6.1
Home-Page: <URL:http://fakechroot.alioth.debian.org/>
Description: gives a fake chroot environment
Origin: debian
Copyright: GPL
 (c) 2003 Piotr Roszatycki <dexter@debian.org>, GPL
 .
 Based on fakeroot package:
 GNU copyleft joost witteveen, <joostje@debian.org>.
Build-Depends: automake%{automake_version}, autoconf, libtool
Build-Depends: sharutils, file, libc6-dev-s390x [s390], libc6-dev-sparc64 [sparc], gcc-3.3 [s390]
Build: bash
 CC=${CC:-gcc}
 CFLAGS=${CFLAGS:--Wall -pedantic -g}
 CXXFLAGS=${CFLAGS:--Wall -pedantic -g}
 if [ "${DEB_BUILD_OPTIONS#*noopt}" != "$DEB_BUILD_OPTIONS" ]; then
     CFLAGS="$CFLAGS -O0"
     CXXFLAGS="$CXXFLAGS -O0"
 else
     CFLAGS="$CFLAGS -O2"
     CXXFLAGS="$CXXFLAGS -O2"
 fi
 .
 if ! [ -f autoconf-stamp ]; then
     rm -f aclocal.m4 configure
     aclocal-%{automake_version}
     autoheader
     libtoolize --copy
     automake-%{automake_version} --add-missing --copy
     autoconf
     pushd fake 
         aclocal-%{automake_version}
         automake-%{automake_version} --add-missing --copy
         autoconf
     popd
     touch autoconf-stamp
 fi
 .
 if ! [ -f configure-stamp ]; then
     install -d mkdir build-tree-lib build-tree-fake build-tree-lib64
     pushd build-tree-lib
         CC="$CC" CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" \
             ../configure --prefix=/usr --mandir=/usr/share/man --libdir=/usr/lib/libfakechroot
     popd
     pushd build-tree-fake
     CC="$CC" CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" \
         ../fake/configure --prefix=/usr --mandir=/usr/share/man
     popd
     if [ "$DEB_HOST_GNU_TYPE" = "sparc-linux" ]; then
         pushd build-tree-lib64
 	 CC="gcc -m64" CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" \
             ../configure --prefix=/usr --mandir=/usr/share/man --build=sparc-linux --host=sparc64-linux
 	 popd
     fi
     if [ "$DEB_HOST_GNU_TYPE" = "s390-linux" ]; then
         pushd build-tree-lib64
         CC="gcc-3.3 -m64" CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" \
             ../configure --prefix=/usr --mandir=/usr/share/man --build=s390-linux --host=s390x-linux
 	 popd
     fi
     touch configure-stamp
 fi
 .
 if ! [ -f build-stamp ]; then
     pushd build-tree-lib
         make
     popd
     pushd build-tree-fake
         make
     popd
     if [ "$DEB_HOST_GNU_TYPE" = "sparc-linux" ]; then
         pushd build-tree-lib64
 	     make libfakechroot.la
 	 popd
     fi
     touch build-stamp
     if [ "$DEB_HOST_GNU_TYPE" = "s390-linux" ]; then
         pushd build-tree-lib64
 	     make libfakechroot.la
 	 popd
     fi
 fi
 .
%if %{with_test}
 pushd build-tree-lib
     make check
 popd
%endif
Clean: sh
 rm -rf build-tree-* || true
 rm -f *-stamp || true

Package: fakechroot
Architecture: any
Depends: fakeroot (>= %{fakeroot_version}), []
Description: gives a fake chroot environment
 This package provides a library which overrides libc functions, so
 it is possible to use root-specific tools without root priviliges.
 .
 In fake chroot you can install i.e. Debian boostrap, create developer's
 environment and build packages inside chroot'ed system using standard
 non-root user account.
Install: sh
 yada copy -into /usr/lib/libfakechroot build-tree-lib/.libs/*.so.*.*.* build-tree-lib/.libs/*.a
 chmod 644 $ROOT/usr/lib/libfakechroot/*.so.*.*.*
 for f in build-tree-lib/.libs/*.so.*.*.*; do
     f=$(basename $f)
     yada symlink -lib -subdir libfakechroot -as $(echo $f | sed 's/\.[0-9]*\.[0-9]*$//') $f
     yada symlink -lib -subdir libfakechroot -as $(echo $f | sed 's/\.[0-9]*\.[0-9]*\.[0-9]*$//') $f
 done
 yada copy -into /usr/lib build-tree-fake/.libs/*.so.*.*.*
 chmod 4644 $ROOT/usr/lib/*.so.*.*.*
 if [ "$DEB_HOST_GNU_TYPE" = "sparc-linux" -o "$DEB_HOST_GNU_TYPE" = "s390-linux" ]; then
     for f in build-tree-lib64/.libs/*.so.*.*.*; do
         f=$(basename $f)
         yada symlink -lib -into /usr/lib64/libfakechroot -as $(echo $f | sed 's/\.[0-9]*\.[0-9]*$//') $f
         yada symlink -lib -into /usr/lib64/libfakechroot -as $(echo $f | sed 's/\.[0-9]*\.[0-9]*\.[0-9]*$//') $f
     done
     chmod 4644 $ROOT/usr/lib/*.so.*.*.*
 fi
 for f in build-tree-fake/.libs/*.so.*.*.*; do
     f=$(basename $f)
     yada symlink -lib -as $(echo $f | sed 's/\.[0-9]*\.[0-9]*$//') $f
     yada symlink -lib -as $(echo $f | sed 's/\.[0-9]*\.[0-9]*\.[0-9]*$//') $f
 done
 yada install -script -as fakechroot scripts/fakeroot
 yada install -man -as fakechroot.1 doc/fakeroot.1
 yada install -doc README.fakechroot doc/debootstrap.diff 
 yada install -doc -subdir examples scripts/restoremode.sh scripts/savemode.sh scripts/ldd.fake
Shlibs:
 /usr/lib/libfakechroot/libfakechroot 0
